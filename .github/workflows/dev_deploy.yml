name: Dev Infra CI/CD

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  terraform:
    name: 'Terraform and Python Lint'
    runs-on: ubuntu-latest

    env:
      AWS_REGION: 'eu-west-2'
      TF_VERSION: '1.5.0'
      TFLINT_VERSION: '0.54.0'  # Updated to a more recent version
      TFSEC_VERSION: '1.28.1'   # Updated to a more recent version

    steps:
    - name: 'Checkout GitHub repository'
      uses: actions/checkout@v4

    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest boto3

    # - name: Lint Python files with flake8
    #   run: |
    #     flake8 backend

    # - name: Unit Test Python Files With Pytest
    #   run: |
    #     pytest backend/unit_tests

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 'Terraform Init'
      run: terraform init

    - name: 'Terraform Format'
      run: terraform fmt

    - name: 'Terraform Validate'
      run: terraform validate

    # - name: 'Terraform force unlock'
    #   run: terraform force-unlock -force cfd44e26-ba22-8d46-3a41-0e157ec8a353

    - name: 'Terraform Plan'
      if: github.event_name == 'push'
      run: terraform plan -var-file="config/dev.tfvars" -out=tfplan

    - name: 'Terraform Apply'
      if: github.event_name == 'push'
      run: terraform apply -auto-approve tfplan
    
    - name: Generate Frontend Variables
      run: |
        terraform output -json > frontend/vars.json


    - name: Get S3 Bucket Name
      id: get_bucket
      run: |
        BUCKET_NAME=$(jq -r '.S3_FRONTEND_BUCKET_NAME.value' frontend/vars.json)
        echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

    - name: Deploy Frontend to S3
      run: |
        aws s3 sync frontend/ s3://${{ steps.get_bucket.outputs.bucket_name }}/ \
          --delete \
          --exclude ".git*" \
          --exclude "*.md"